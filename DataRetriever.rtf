{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww14500\viewh14540\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
//https://docs.google.com/spreadsheets/d/1sUFwKGAMzYWl6Y9RUM-dyWgsE1BfPqMzToBBm7JHK5g/edit#gid=0\
//-----------------------------------------------\
//https://script.google.com/macros/s/AKfycbx--iuHSHMAr48mGHtJKHYyiaLjXqZTZBkUd-o2EDm3mYcTh21F/exec\
//\
// Author: Trieu Le\
// Email: lethanhtrieuk36@gmail.com\
// Publish date: 07-Oct-2015\
// Description: This code for demonstration send data from ESP8266 into Google Spreadsheet\
// GET request syntax:\
// https://script.google.com/macros/s/<gscript id>/exec?header_here=data_here\
// Modifyed by Moz for Youtube changel logMaker360 for this video: https://youtu.be/fS0GeaOkNRw 24-02-2018\
\
\
//-----------------------------------------------\
/**\
* Function doGet: Parse received data from GET request, \
get and store data which is corresponding with header row in Google Spreadsheet\
*/\
\
// URL for testing purposes: http://script.google.com/macros/s/<ID>/exec?heater1=1&heater2=3&window011=1&window021=1&window012=0&misconductSeconds=5\
var MAX_ROWS = 1440;\
var HEADER_ROW = 17; \
\
function doGet(e) \{ \
  Logger.log( JSON.stringify(e) );  // view parameters\
  var result = 'Ok'; // assume success\
  if (e.parameter == 'undefined') \{\
    result = 'No Parameters';\
  \}\
  \
  else \{\
    var school_id = '';     // ID of the school overview spreadsheet\
    var school_sheet = SpreadsheetApp.openById(school_id).getActiveSheet();\
    \
    var class_row = 4; // enter the row number of the school sheet, which is assigned to your class\
    \
    var sheet_id = ''; 		// Spreadsheet ID\
    var sheet = SpreadsheetApp.openById(sheet_id).getActiveSheet();		// get Active sheet\
    var rowData = [];\
    rowData[0] = new Date(); 											// Timestamp in column A\
    \
    var lastCol = sheet.getLastColumn();\
    var lastRow = sheet.getLastRow();\
    \
    var currentMisconductSeconds = 0;\
    \
    \
    if (lastRow > MAX_ROWS + HEADER_ROW - 1) \{ \
      sheet.deleteRow(lastRow);\
    \}\
    \
    \
    var currentDate = new Date();\
    var latestDate = sheet.getRange('A18').getValue();\
    \
    currentDate =  Utilities.formatDate(currentDate, "GMT+1", "dd.MM.yyyy");\
    latestDate =  Utilities.formatDate(latestDate, "GMT+1", "dd.MM.yyyy");\
    \
    if (currentDate > latestDate) \{\
      \
      sheet.insertRowAfter(4);\
      // reset style of the new row, otherwise it will inherit the style of the header row\
      var range = sheet.getRange('F5:G5');\
      //range.setBackground('#ffffff');\
      range.setFontColor('#000000');\
      range.setFontSize(10);\
      range.setFontWeight('normal');\
      \
      sheet.getRange('F5').setValue(currentDate).setNumberFormat("dd.MM.yyyy");\
      sheet.getRange('G5').setValue(0);\
      sheet.deleteRow(12);\
      \
      sheet.getRange('C3').setValue('=SUM(G5:G11)');\
      \
      var averageRow = school_sheet.getLastRow();\
      \
      //Enter the correct row of the school sheet which represents your class \
      school_sheet.getRange('B' + class_row + ':G' + class_row).setValues(sheet.getRange('G14:L14').getValues());\
      sheet.getRange('G15:L15').setValues(school_sheet.getRange('B' + averageRow +':G' + averageRow).getValues());\
    \}\
    \
    \
    sheet.insertRowAfter(HEADER_ROW);\
    \
    // reset style of the new row, otherwise it will inherit the style of the header row\
    var range = sheet.getRange('A18:Z18');\
    //range.setBackground('#ffffff');\
    range.setFontColor('#000000');\
    range.setFontSize(10);\
    range.setFontWeight('normal');\
    \
    // write the timestamp\
    var timeStampColumn = 1;\
    sheet.getRange(HEADER_ROW+1, timeStampColumn).setValue(rowData[0]).setNumberFormat("dd.MM.yyyy HH:mm:ss");\
    \
    for (var param in e.parameter) \{\
      Logger.log('In for loop, param=' + param);\
      var value = stripQuotes(e.parameter[param]);\
      Logger.log(param + ':' + e.parameter[param]);\
      \
      // List all of your variables given in the parameter with the following pattern. \
      \
      switch (param) \{\
        case 'heater1': //Parameter\
          //rowData[1] = value; //Value in column B\
          sheet.getRange(HEADER_ROW+1, 2).setValue([value]);\
          result = 'Written on column B';\
          break;\
        case 'heater2': //Parameter\
          //rowData[2] = value; //Value in column C\
          sheet.getRange(HEADER_ROW+1, 3).setValue([value]);\
          result += ' ,Written on column C';\
          break; \
        case 'window011': //Parameter\
          //rowData[3] = value; //Value in column D\
          sheet.getRange(HEADER_ROW+1, 4).setValue([value]);\
          result += ' ,Written on column D';\
          break; \
        case 'window021': //Parameter\
          //rowData[4] = value; //Value in column E\
          sheet.getRange(HEADER_ROW+1, 5).setValue([value]);\
          result += ' ,Written on column E';\
          break; \
        case 'window012': //Parameter\
          //rowData[5] = value; //Value in column F\
          sheet.getRange(HEADER_ROW+1, 6).setValue([value]);\
          result += ' ,Written on column F';\
          break;\
        case 'misconductSeconds': //Parameter\
          //rowData[6] = value; //Value in column G\
          sheet.getRange(HEADER_ROW+1, 7).setValue([value]);\
          currentMisconductSeconds = value;\
          result += ' ,Written on column G';\
          break; \
        default:\
          result = "unsupported parameter";\
      \}\
    \}\
    Logger.log(JSON.stringify(rowData));\
    // Write new row below\
    //var newRange = sheet.getRange(HEADER_ROW+1, 1, 1, rowData.length);\
    //newRange.setValues([rowData]);\
  \}\
  \
  // Adds the misconduct seconds to the weekly overview. Check if the cells are assigned correctly for your own sheet!\
  \
  var currentDailyMisconductSeconds = sheet.getRange('G5').getValue();\
  sheet.getRange('G5').setValue(parseInt(currentDailyMisconductSeconds) + parseInt(currentMisconductSeconds));\
  \
  //var x;\
  //x=sheet.getCell('A17').getValue();\
  //sheet.getCell('A3').setValue(x);\
  \
  \
  // Return result of operation\
  return ContentService.createTextOutput(result);\
\}\
/**\
* Remove leading and trailing single or double quotes\
*/\
function stripQuotes( value ) \{\
  return value.replace(/^["']|['"]$/g, "");\
\}\
//-----------------------------------------------\
// End of file\
//-----------------------------------------------}